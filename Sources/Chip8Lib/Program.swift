#if os(Linux)
    import Glibc
#else
    import Foundation
#endif

public struct Program {
    public enum ProgramError: Error {
        case FileOpenFailed(path: String)
        case FileReadFailed(path: String)
    }
    
    var memory: [UInt8]
    
    init(bytes: [UInt8]) {
        self.memory = bytes
    }
    
    public init(ch8FilePath: String) throws {
        let path = "/Users/tariq/dev/emu/roms/chip8/roms/\(ch8FilePath)"
        let file = fopen(path, "rb")
        if file == nil {
            throw ProgramError.FileOpenFailed(path: path)
        }
        defer { fclose(file) }
        
        fseek(file, 0, SEEK_END)
        let fileSize = ftell(file)
        rewind(file)
        
        var buffer = [UInt8](repeating: 0, count: fileSize)
        let readSize = fread(&buffer, MemoryLayout<UInt8>.size, fileSize, file)
        if readSize != fileSize {
            throw ProgramError.FileReadFailed(path: path)
        }
        
        self.init(bytes: buffer)
    }
    
    public init(instructionBytes: [UInt16]) {
        self.init(bytes: to8BitArray(instructionBytes))
    }
    
    init(instructions: [Instruction]) {
        self.init(instructionBytes: instructions.map { $0.bytes })
    }
    
    public mutating func withPause() {
        self.memory.append(contentsOf: split(0x0000))
        self.memory.append(contentsOf:
            split(UInt16(0x1 << 12 + (0x200 + memory.count)))
        )
    }
    
    public static func drawKeypress() -> Program {
        return Program(instructionBytes: [
            0xF00A, // Wait for keypress -> V0                  | V0 = key
            0xF029, // Load location I with sprite              | I = self[V0] (location of key press)
            0x6100, // Load V1 with 0                           | V1 = 0
            0x6200, // Load V2 with 0                           | V2 = 0
            0x00E0, // Clear screen
            0xD125, // Draw                                     | Draws a 0 at 0,0
            0x1200, // Call first instruction
        ])
    }
    
    public static func hexToDecimal() -> Program {
        return Program(instructionBytes: [
            0x00E0,0x6380,0x6400,0x6500,0xA500,0xF333,0xF265,0xF029,
            0xD455,0xF129,0x7406,0xD455,0xF229,0x7406,0xD455,0xF000,
        ]);
    }
    
    public static func testRom() -> Program {
        return Program(instructionBytes: [
            0x00e0, 0x6300, 0x6401, 0x65ee, 0x35ee, 0x1310, 0x6300, 0x6402,
            0x65ee, 0x66ee, 0x5560, 0x1310, 0x6300, 0x6403, 0x65ee, 0x45fd,
            0x1310, 0x6300, 0x6404, 0x65ee, 0x7501, 0x35ef, 0x1310, 0x6300,
            0x6405, 0x6f01, 0x65ee, 0x66ef, 0x8565, 0x3f00, 0x1310, 0x6300,
            0x6406, 0x6f00, 0x65ef, 0x66ee, 0x8565, 0x3f01, 0x1310, 0x6f00,
            0x6300, 0x6407, 0x65ee, 0x66ef, 0x8567, 0x3f01, 0x1310, 0x6300,
            0x6408, 0x6f01, 0x65ef, 0x66ee, 0x8567, 0x3f00, 0x1310, 0x6300,
            0x6409, 0x65f0, 0x660f, 0x8561, 0x35ff, 0x1310, 0x6301, 0x6400,
            0x65f0, 0x660f, 0x8562, 0x3500, 0x1310, 0x6301, 0x6401, 0x65f0,
            0x660f, 0x8563, 0x35ff, 0x1310, 0x6f00, 0x6301, 0x6402, 0x6581,
            0x850e, 0x3f01, 0x1310, 0x6301, 0x6403, 0x6f01, 0x6547, 0x850e,
            0x3f00, 0x1310, 0x6301, 0x6404, 0x6f00, 0x6501, 0x8506, 0x3f01,
            0x1310, 0x6301, 0x6405, 0x6f01, 0x6502, 0x8506, 0x3f00, 0x1310,
            0x6301, 0x6406, 0x6015, 0x6178, 0xa3d0, 0xf155, 0xf165, 0x3015,
            0x1310, 0x3178, 0x1310, 0x6301, 0x6407, 0x608a, 0xa3d0, 0xf033,
            0xa3d0, 0xf065, 0x3001, 0x1310, 0x6001, 0xf01e, 0xf065, 0x3003,
            0x1310, 0x6001, 0xf01e, 0xf065, 0x3008, 0x1310, 0x1332, 0x130e,
            0xa32a, 0x6013, 0x6109, 0xd018, 0xf329, 0x6022, 0x610b, 0xd015,
            0xf429, 0x6028, 0x610b, 0xd015, 0x130e, 0xfff0, 0xf0ff, 0xf0f0,
            0xf0ff, 0xa358, 0x6015, 0x610b, 0x6308, 0xd018, 0x7008, 0xf31e,
            0x302d, 0x133a, 0xa370, 0x6002, 0x6118, 0x6308, 0xd018, 0x7005,
            0xf31e, 0x303e, 0x134c, 0x130e, 0xf088, 0x88f0, 0x8888, 0x88f0,
            0x7884, 0x8484, 0x8484, 0x8478, 0x84c4, 0xa494, 0x8c84, 0x8484,
            0xc0a0, 0xa0c0, 0xa0a0, 0xc000, 0x0000, 0xa0a0, 0xe020, 0x20e0,
            0x0000, 0x0000, 0x0000, 0x0000, 0xc0a0, 0xa0c0, 0xa0a0, 0xc000,
            0x0000, 0x60a0, 0xc080, 0x6000, 0x0000, 0x6080, 0x4020, 0xc000,
            0x8080, 0xc080, 0x8080, 0x6000, 0xe080, 0x8080, 0x8080, 0xe000,
            0x0000, 0x40a0, 0xa0a0, 0x4000, 0x2020, 0x2060, 0xa0a0, 0x6000,
            0x0000, 0x60a0, 0xc080, 0x6000, 0x0000, 0x0060, 0x4040, 0x5000,
            0x0000, 0x0000, 0x0000,
        ])
    }
    
    public static func maze() -> Program {
        return Program(instructionBytes: [
            0xa21e, 0xc201, 0x3201, 0xa21a, 0xd014, 0x7004, 0x3040, 0x1200,
            0x6000, 0x7104, 0x3120, 0x1200, 0x1218, 0x8040, 0x2010, 0x2040,
            0x8010,
        ])
    }
    
    public static func astroDodge() -> Program {
        return Program(instructionBytes: [
            0x1214, 0x5245, 0x5649, 0x5641, 0x4c53, 0x5455, 0x4449, 0x4f53,
            0x3230, 0x3038, 0x00e0, 0x6d20, 0xfd15, 0x2458, 0x2460, 0x6d40,
            0xfd15, 0x2458, 0x2460, 0x6d20, 0xfd15, 0x2458, 0x00e0, 0xa3d8,
            0x2520, 0x24b8, 0x6d04, 0x6c00, 0x6005, 0xe09e, 0x1240, 0x1254,
            0xfd15, 0x2458, 0x7c01, 0x4c00, 0x24b8, 0x4c04, 0x24b8, 0x4c08,
            0x6c00, 0x1238, 0xa3d8, 0x2520, 0x00e0, 0x6810, 0x6914, 0x22e2,
            0x2288, 0x254a, 0x632c, 0x6400, 0x2582, 0x632c, 0x6406, 0x258e,
            0x6d00, 0x6e08, 0x22b0, 0x22e8, 0x7d08, 0x4d80, 0x6d00, 0x7e08,
            0x4e80, 0x6e00, 0x1274, 0x122c, 0x6c00, 0xa33e, 0xfc1e, 0xf165,
            0xc103, 0xf155, 0xa358, 0xd018, 0x7c03, 0x3c09, 0x128a, 0x00ee,
            0x231a, 0x2552, 0x231a, 0xc00f, 0x8004, 0x8004, 0x6100, 0x00ee,
            0x6c00, 0x6500, 0xa33e, 0xfc1e, 0xf265, 0xa358, 0xfd1e, 0xd018,
            0x8124, 0x8310, 0x641e, 0x8345, 0x4f01, 0x22a0, 0xa358, 0xfe1e,
            0xd018, 0xa33e, 0xfc1e, 0xf155, 0x7518, 0x7c03, 0x3c09, 0x12b4,
            0x00ee, 0xa350, 0xd898, 0x00ee, 0x22e2, 0x6004, 0xe09e, 0x12f4,
            0x3800, 0x78fe, 0x6006, 0xe09e, 0x12fe, 0x3838, 0x7802, 0x6002,
            0xe09e, 0x1308, 0x3910, 0x79ff, 0x6008, 0xe09e, 0x1312, 0x3918,
            0x7901, 0x22e2, 0x4f01, 0x1328, 0x00ee, 0x632c, 0x6400, 0x2582,
            0x632c, 0x6406, 0x258e, 0x00ee, 0x00e0, 0x6000, 0x6104, 0x24ee,
            0x6316, 0x6416, 0x2582, 0x6005, 0xe09e, 0x1336, 0x122c, 0x000e,
            0x0118, 0xb402, 0x30e3, 0x0340, 0x7501, 0x4060, 0x0240, 0x3603,
            0x1818, 0x3424, 0x7eff, 0xe799, 0x0040, 0x3814, 0x2a75, 0x3a14,
            0x0000, 0x2870, 0x3e07, 0x2a00, 0x0040, 0x085c, 0x7a75, 0x0a04,
            0x0050, 0x2854, 0x3e75, 0x2e01, 0x2070, 0x787c, 0x3c75, 0x6a54,
            0x0064, 0x7878, 0x7e7d, 0xe850, 0x0844, 0x2a50, 0x3a5d, 0xe840,
            0x0854, 0x0a11, 0x2a5c, 0x6840, 0x0004, 0x2a57, 0x2a16, 0x2850,
            0x0000, 0x2a13, 0x6a56, 0x0800, 0x0000, 0x0871, 0x2a52, 0x3000,
            0x0004, 0x0a14, 0x3a60, 0x6800, 0x0004, 0x0a1c, 0x3e70, 0x6850,
            0x2050, 0x2e5f, 0x2e5c, 0x2850, 0x205c, 0x3a57, 0x3e5e, 0x2850,
            0x0058, 0x3877, 0x2e7f, 0x3e54, 0x787e, 0xf7f1, 0xbe9e, 0x3866,
            0xf8cd, 0x739b, 0xe336, 0xcfde, 0x7866, 0xf71d, 0xbe9b, 0x3a36,
            0xf9cd, 0x73b3, 0xe36c, 0xcfd8, 0xcd33, 0x8378, 0x33d9, 0x669c,
            0xcdf8, 0x9be3, 0x3687, 0x6c3c, 0xfd7e, 0xf779, 0xbf9f, 0x7c66,
            0xfccd, 0xfb9b, 0xf736, 0xefde, 0xfd66, 0xf71d, 0xbf9b, 0x7c36,
            0xfccd, 0xfbb3, 0xf7ec, 0xefd8, 0xcd00, 0xc300, 0x3300, 0x6600,
            0xcd00, 0x9b00, 0x3600, 0x0c00, 0x8566, 0x0019, 0x019b, 0x4666,
            0x05cd, 0x889b, 0x146c, 0x20d8, 0xcd33, 0x837c, 0x33d9, 0x6ebe,
            0xcdfd, 0xdbf3, 0x76cf, 0x6cbc, 0xf007, 0x3000, 0x1458, 0x00ee,
            0x6d04, 0x610c, 0x601c, 0x6212, 0xa62f, 0xf21e, 0xd016, 0xfd15,
            0x2458, 0x6014, 0x620c, 0xa62f, 0xf21e, 0xd016, 0x6024, 0x6218,
            0xa62f, 0xf21e, 0xd016, 0xfd15, 0x2458, 0x600c, 0x6206, 0xa62f,
            0xf21e, 0xd016, 0x602c, 0x621e, 0xa62f, 0xf21e, 0xd016, 0xfd15,
            0x2458, 0xa62f, 0x6004, 0xd016, 0x6034, 0x6224, 0xa62f, 0xf21e,
            0xd016, 0xfd15, 0x2458, 0x00ee, 0x6206, 0x6000, 0x6117, 0xa59f,
            0xd016, 0x7008, 0xf21e, 0xd016, 0x7008, 0xf21e, 0xd016, 0x7008,
            0xf21e, 0xd016, 0x7008, 0xf21e, 0xd016, 0x7008, 0xf21e, 0xd016,
            0x7008, 0xf21e, 0xd016, 0x7008, 0xf21e, 0xd016, 0x00ee, 0x620c,
            0xa5cf, 0xd01c, 0x7008, 0xf21e, 0xd01c, 0x7008, 0xf21e, 0xd01c,
            0x7008, 0xf21e, 0xd01c, 0x7008, 0xf21e, 0xd01c, 0x7008, 0xf21e,
            0xd01c, 0x7008, 0xf21e, 0xd01c, 0x7008, 0xf21e, 0xd01c, 0x00ee,
            0x6401, 0x6507, 0x6200, 0x6300, 0x6000, 0x8130, 0x7103, 0xd011,
            0x7108, 0xf41e, 0xd011, 0xf41e, 0x7008, 0x3040, 0x152a, 0x7303,
            0x8352, 0x7201, 0x3208, 0x1528, 0x00ee, 0x6000, 0xa59a, 0xf055,
            0x00ee, 0xa59a, 0xf165, 0x7001, 0x8200, 0x8215, 0x4f01, 0x8100,
            0xf155, 0x00ee, 0xa59c, 0xf265, 0xf029, 0xd345, 0x7305, 0xf129,
            0xd345, 0x7305, 0xf229, 0xd345, 0x7305, 0x6200, 0xf229, 0xd345,
            0x00ee, 0xa59a, 0xf065, 0xa59c, 0xf033, 0x2564, 0x00ee, 0xa59b,
            0xf065, 0xa59c, 0xf033, 0x2564, 0x00ee, 0x0064, 0x0000, 0x0000,
            0x3c36, 0x3c30, 0x3000, 0xf3db, 0xf3db, 0xdb00, 0xe70c, 0xc701,
            0xef00, 0x9e30, 0x1c86, 0x3c00, 0x1e30, 0x1c06, 0x3c00, 0xf366,
            0x6766, 0x6600, 0x9edb, 0xdedb, 0xdb00, 0x7830, 0x3030, 0x3001,
            0x0303, 0x0303, 0x0303, 0x0303, 0x0303, 0x01e7, 0x0d0d, 0x6f6d,
            0x6d6d, 0x6d6d, 0x6d6d, 0xed3f, 0xb5b5, 0xb5b5, 0xb5b5, 0xb5b5,
            0xb5b5, 0xb53e, 0xb0b0, 0xbcb0, 0xb0b0, 0xb0b0, 0xb0b0, 0xbe1c,
            0x3636, 0x3636, 0x3636, 0x3636, 0x3636, 0x1cdb, 0xdbdb, 0xdbdb,
            0xdbdb, 0xdbdb, 0xdb7b, 0x3bef, 0x0d0d, 0xcf0d, 0x0d0d, 0x0d0d,
            0x0d0d, 0xed00, 0x8080, 0x0080, 0x8080, 0x8080, 0x8080, 0x8000,
            0x000c, 0x1111, 0x1000, 0x0095, 0x5595, 0xcd00, 0x0053, 0x5555,
            0x3340, 0x4044, 0x4241, 0x4600, 0x406a, 0x4a4a, 0x4600, 0x2069,
            0xaaaa, 0x6900, 0x0020, 0x9088, 0x3000
        ])
    }
}

